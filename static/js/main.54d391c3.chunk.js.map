{"version":3,"sources":["components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","time","props","isActive","isFinished","componentDidMount","autostart","startTimer","countdown","setState","prevState","step","clearInterval","timer","onTimePause","setInterval","onTimeStart","displayTime","ms","onTimeEnd","sec","parseInt","min","hour","onTick","className","this","onClick","style","animationDuration","React","Component","App","infinite","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4NA4EeA,E,4MAxEXC,MAAQ,CACJC,KAAM,EAAKC,MAAMD,KACjBE,UAAU,EACVC,YAAY,G,EAGhBC,kBAAoB,WACZ,EAAKH,MAAMI,WACX,EAAKC,c,EAIbC,UAAY,WACR,OACI,EAAKC,UACD,SAACC,GAAD,MAAc,CACVT,KAAMS,EAAUT,KAAO,EAAKC,MAAMS,U,EAKlDJ,WAAa,WACL,EAAKP,MAAMG,UAIXS,cAAc,EAAKC,OACZ,EAAKX,MAAMY,aAAa,EAAKZ,MAAMY,gBAJzC,EAAKD,MAAQE,YAAY,EAAKP,UAAW,EAAKN,MAAMS,MAC9C,EAAKT,MAAMc,aAAa,EAAKd,MAAMc,eAK9C,EAAKP,UAAS,SAACC,GAAD,MAAc,CACxBP,UAAWO,EAAUP,c,EAK7Bc,YAAc,SAACC,GACRA,GAAM,IACLN,cAAc,EAAKC,OACnB,EAAKJ,SAAS,CACVL,YAAY,IAET,EAAKF,MAAMiB,WAAW,EAAKjB,MAAMiB,aAG5C,IAAIC,EAAMC,SAAUH,EAAK,IAAQ,IACjCI,EAAMD,SAAUH,EAAE,IAAkB,IACpCK,EAAOF,SAAUH,EAAE,KAAuB,IAS9C,OANO,EAAKhB,MAAMsB,QAAUN,EAAK,GAAK,EAAKlB,MAAMG,UAAU,EAAKD,MAAMsB,OAAOJ,IAEzEG,EAAQA,EAAO,GAAM,IAAMA,EAAOA,GAIxB,KAHVD,EAAOA,EAAM,GAAM,IAAMA,EAAMA,GAGT,KAFtBF,EAAOA,EAAM,GAAM,IAAMA,EAAMA,I,uDAM/B,OACI,yBAAKK,UAAW,iBACZ,4BAAQA,UAAYC,KAAK1B,MAAMG,SAAW,qBAAuB,eAAgBwB,QAASD,KAAKnB,YAC1FmB,KAAK1B,MAAMG,SAAW,QAAU,SAErC,0BAAMsB,UAAU,SAASC,KAAK1B,MAAMI,WAAa,SAAWsB,KAAKT,YAAYS,KAAK1B,MAAMC,OACxF,yBAAKwB,UAAYC,KAAK1B,MAAMG,SAAW,YAAc,mBAAoByB,MAAO,CAACC,kBAAmBH,KAAKxB,MAAMD,KAAO,a,GAlElH6B,IAAMC,W,MCyBXC,MAxBf,WACE,OACE,6BACE,kBAAC,EAAD,CACE/B,KAAQ,IACRU,KAAQ,MAEV,kBAAC,EAAD,CACEV,KAAQ,IACRU,KAAQ,IACRL,WAAS,EACT2B,UAAQ,IAEV,kBAAC,EAAD,CACEhC,KAAQ,KACRU,KAAQ,IACRa,OAAQ,SAACvB,GAAD,OAAUiC,QAAQC,IAAR,uEAA0BlC,EAA1B,2CAClBe,YAAe,kBAAMkB,QAAQC,IAAI,2FACjCrB,YAAe,kBAAMoB,QAAQC,IAAI,sFACjChB,UAAa,kBAAMe,QAAQC,IAAI,iECXnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,a","file":"static/js/main.54d391c3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Timer extends React.Component {\r\n    state = {\r\n        time: this.props.time,\r\n        isActive: false,\r\n        isFinished: false\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (this.props.autostart) {\r\n            this.startTimer();\r\n        }\r\n    }\r\n\r\n    countdown = () => {\r\n        return (\r\n            this.setState(\r\n                (prevState)=>({\r\n                    time: prevState.time - this.props.step,\r\n                })\r\n            ))\r\n    }\r\n\r\n    startTimer = () =>{\r\n        if(!this.state.isActive){\r\n             this.timer = setInterval(this.countdown, this.props.step);\r\n                if(this.props.onTimeStart) this.props.onTimeStart();  \r\n        } else {\r\n            clearInterval(this.timer);\r\n                if(this.props.onTimePause) this.props.onTimePause();\r\n        }\r\n        this.setState((prevState)=>({\r\n            isActive: !prevState.isActive\r\n        }))\r\n    }\r\n\r\n\r\n    displayTime = (ms) =>{\r\n        if(ms <= 1){      \r\n            clearInterval(this.timer);\r\n            this.setState({\r\n                isFinished: true\r\n            })\r\n                if(this.props.onTimeEnd) this.props.onTimeEnd()\r\n        }\r\n\r\n        let sec = parseInt((ms / 1000) % 60),\r\n        min = parseInt((ms / (1000 * 60)) % 60),\r\n        hour = parseInt((ms / (1000 * 60 * 60)) % 24);\r\n\r\n\r\n        if(this.props.onTick && ms > 1 && this.state.isActive) this.props.onTick(sec);\r\n\r\n        hour = (hour < 10) ? '0' + hour : hour;\r\n        min = (min < 10) ? '0' + min : min;\r\n        sec = (sec < 10) ? '0' + sec : sec;\r\n\r\n    return hour + ':' + min + ':' + sec;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className= 'timer-wrapper'>\r\n                <button className= {this.state.isActive ? 'start-button pause' : 'start-button'} onClick={this.startTimer}>\r\n                    {this.state.isActive ? 'Pause' : 'Start'}\r\n                </button>\r\n                <span className='timer'>{this.state.isFinished ? 'Finish' : this.displayTime(this.state.time)}</span>\r\n                <div className= {this.state.isActive ? 'timer-bar' : 'timer-bar paused'} style={{animationDuration: this.props.time + 'ms'}}> \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\nimport Timer from './components/Timer.js';\nimport './App.css';\n\nfunction App() { \n  return (\n    <div>\n      <Timer \n        time = {4000} \n        step = {1000}/>\n\n      <Timer \n        time = {5000} \n        step = {1000} \n        autostart\n        infinite/>\n\n      <Timer \n        time = {12000} \n        step = {2000} \n        onTick={(time) => console.log(`Залишилось ${time} секунд`)}\n        onTimeStart = {() => console.log('Таймер запущено!')}\n        onTimePause = {() => console.log('Таймер на паузі!')}\n        onTimeEnd = {() => console.log('Час вийшов!')}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}